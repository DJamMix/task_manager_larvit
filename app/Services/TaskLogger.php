<?php

namespace App\Services;

use App\CoreLayer\Enums\TaskPriorityEnum;
use App\CoreLayer\Enums\TaskStatusEnum;
use App\CoreLayer\Integrations\Ebot\EBot;
use App\Models\Task;
use App\Models\User;
use Illuminate\Support\Facades\URL;
use Illuminate\Support\Str;

class TaskLogger
{
    protected EBot $ebot;

    public function __construct(EBot $ebot)
    {
        $this->ebot = $ebot;
    }

    public function logStatusChange(
        Task $task,
        User $user,
        string $toStatus,
        ?string $additionalMessage = null
    ): void {
        $toStatusLabel = TaskStatusEnum::tryFrom($toStatus)?->label() ?? $toStatus;

        $plainText = sprintf(
            "üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –Ω–∞ '%s'",
            $user->name,
            $toStatusLabel
        );

        if ($additionalMessage) {
            $plainText .= "\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: " . $additionalMessage;
        }

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    public function logTaskCreation(Task $task, User $user): void
    {
        $plainText = sprintf(
            "üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: %s",
            $user->name,
            $task->name
        );

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    public function logTaskCancellation(
        Task $task,
        User $user,
        ?string $reason = null
    ): void {
        $plainText = sprintf(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª –∑–∞–¥–∞—á—É: %s",
            $user->name,
            $task->name
        );

        if ($reason) {
            $plainText .= "\nüìå –ü—Ä–∏—á–∏–Ω–∞: " . $reason;
        }

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    public function logTaskReturnEstimation(
        Task $task,
        User $user,
        ?string $reason = null
    ): void {
        $plainText = sprintf(
            "‚Ü©Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ü–µ–Ω–∫—É: %s",
            $user->name,
            $task->name
        );

        if ($reason) {
            $plainText .= "\nüìå –ü—Ä–∏—á–∏–Ω–∞: " . $reason;
        }

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    public function logTaskReturnDemoEstimation(
        Task $task,
        User $user,
        ?string $reason = null
    ): void {
        $plainText = sprintf(
            "‚Ü©Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–µ—Ä–Ω—É–ª –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –î–ï–ú–û: %s",
            $user->name,
            $task->name
        );

        if ($reason) {
            $plainText .= "\nüìå –ü—Ä–∏—á–∏–Ω–∞: " . $reason;
        }

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    public function logCustomAction(
        Task $task,
        User $user,
        string $action,
        ?string $details = null
    ): void {
        $plainText = sprintf(
            "‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: %s",
            $user->name,
            $action
        );

        if ($details) {
            $plainText .= "\nüîç –î–µ—Ç–∞–ª–∏: " . $details;
        }

        $quillContent = $this->formatForQuill($plainText);
        $telegramMessage = $this->formatForTelegram($plainText, $task);

        $this->createComment($task, $user, $quillContent, $plainText, $telegramMessage);
    }

    protected function createComment(
        Task $task,
        User $user,
        array $quillContent,
        string $plainText,
        string $telegramMessage
    ): void {

        $task->comments()->create([
            'user_id' => $user->id,
            'text' => json_encode($quillContent),
            'plain_text' => $plainText
        ]);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        $this->sendTelegramNotification($task, $user, $telegramMessage);
    }

    protected function formatForQuill(string $text): array
    {
        $lines = explode("\n", $text);
        $delta = [];

        foreach ($lines as $line) {
            if (!empty($delta)) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º–∏
                $delta[] = ['insert' => "\n"];
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è —Å—Ç—Ä–æ–∫–∏
            $attributes = $this->determineQuillAttributes($line);
            $delta[] = ['insert' => trim($line), 'attributes' => $attributes];
        }

        return [
            'ops' => $delta,
            'html' => $this->convertToHtml($delta)
        ];
    }

    protected function determineQuillAttributes(string $line): array
    {
        $attributes = [];

        // –≠–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å—Ç–∏–ª—å
        if (Str::startsWith($line, 'üîÑ')) {
            $attributes['bold'] = true;
            $attributes['color'] = '#2b6cb0'; // —Å–∏–Ω–∏–π
        } elseif (Str::startsWith($line, '‚ùå')) {
            $attributes['bold'] = true;
            $attributes['color'] = '#e53e3e'; // –∫—Ä–∞—Å–Ω—ã–π
        } elseif (Str::startsWith($line, 'üÜï')) {
            $attributes['bold'] = true;
            $attributes['color'] = '#38a169'; // –∑–µ–ª–µ–Ω—ã–π
        } elseif (Str::startsWith($line, 'üìå') || Str::startsWith($line, 'üìù')) {
            $attributes['italic'] = true;
        }

        return $attributes;
    }

    protected function convertToHtml(array $delta): string
    {
        $html = '';
        foreach ($delta as $op) {
            if ($op['insert'] === "\n") {
                $html .= "<br>";
                continue;
            }

            $text = htmlspecialchars($op['insert']);
            $attrs = $op['attributes'] ?? [];

            if (!empty($attrs)) {
                $style = '';
                if (isset($attrs['bold'])) $style .= 'font-weight:bold;';
                if (isset($attrs['italic'])) $style .= 'font-style:italic;';
                if (isset($attrs['color'])) $style .= 'color:' . $attrs['color'] . ';';

                $html .= sprintf('<span style="%s">%s</span>', $style, $text);
            } else {
                $html .= $text;
            }
        }

        return $html;
    }

    protected function formatForTelegram(string $text, Task $task): string
    {
        // –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π —Å—Å—ã–ª–∫–∏
        return sprintf(
            "%s\n\nüè∑Ô∏è ID: #T%d\nüìÇ –ü—Ä–æ–µ–∫—Ç: %s",
            $text,
            $task->id,
            $task->project->name
        );
    }

    protected function sendTelegramNotification(Task $task, User $actor, string $baseMessage): void
    {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        if ($task->executor && $task->executor->id !== $actor->id && $task->executor->telegram_id) {
            $executorUrl = URL::route('platform.systems.my_tasks.view', $task->id);
            $executorMessage = $baseMessage . "\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ](" . $executorUrl . ")" .
                             "\n‚ÑπÔ∏è –í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —ç—Ç–æ–π –∑–∞–¥–∞—á–∏";
            
            $this->ebot->sendMessage(
                $task->executor->telegram_id,
                $executorMessage,
                null,
                'Markdown'
            );
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é
        if ($task->creator && $task->creator->id !== $actor->id && 
            (!$task->executor || $task->creator->id !== $task->executor->id) &&
            $task->creator->telegram_id) {
            $creatorUrl = URL::route('platform.systems.client.project.tasks.view', [
                'project' => $task->project,
                'task' => $task
            ]);
            $creatorMessage = $baseMessage . "\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ](" . $creatorUrl . ")" .
                            "\n‚ÑπÔ∏è –≠—Ç–æ –≤–∞—à–∞ –∑–∞–¥–∞—á–∞";
            
            $this->ebot->sendMessage(
                $task->creator->telegram_id,
                $creatorMessage,
                null,
                'Markdown'
            );
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ–µ–∫—Ç–∞
        foreach ($task->project->clients as $client) {
            if ($client->id !== $actor->id &&
                $client->telegram_id) {
                $clientUrl = URL::route('platform.systems.client.project.tasks.view', [
                    'project' => $task->project,
                    'task' => $task
                ]);
                $clientMessage = $baseMessage . "\n\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ](" . $clientUrl . ")" .
                                "\n‚ÑπÔ∏è –≠—Ç–æ –∑–∞–¥–∞—á–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞";
                
                $this->ebot->sendMessage(
                    $client->telegram_id,
                    $clientMessage,
                    null,
                'Markdown'
                );
            }
        }
    }

    protected function getExecutorSpecificText(string $text): string
    {
        return $text . "\n\n‚ÑπÔ∏è –í—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —ç—Ç–æ–π –∑–∞–¥–∞—á–∏";
    }

    protected function getClientSpecificText(string $text): string
    {
        return $text . "\n\n‚ÑπÔ∏è –≠—Ç–æ –∑–∞–¥–∞—á–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞";
    }

    public function createTaskPushNotifPM(Task $task)
    {
        $pmTelegramId = 625170774; //–ü–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥

        $priority = TaskPriorityEnum::from($task->priority);

        $taskUrl = route('platform.systems.tasks.edit', $task);

        $message = $this->getPriorityHeader($priority) . "\n\n";
        $message .= "üìå *{$task->name}*\n\n";
        $message .= "üë§ *–°–æ–∑–¥–∞—Ç–µ–ª—å –∑–∞–¥–∞—á–∏:* {$task->creator->name}\n";
        $message .= "üìÖ *–°–æ–∑–¥–∞–Ω–∞:* {$task->created_at->format('d.m.Y –≤ H:i')}\n";
        $message .= $this->getPriorityLine($priority) . "\n";

        $message .= "\nüîó [üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞—á–µ]({$taskUrl})";
        $message .= "\n_–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è_ üë§";

        $this->ebot->sendMessage(
            $pmTelegramId,
            $message,
            null,
            'Markdown'
        );
    }

    private function getPriorityHeader(TaskPriorityEnum $priority): string
    {
        return match($priority) {
            TaskPriorityEnum::EMERGENCY => "üî• *üö® –ê–í–ê–†–ò–ô–ù–ê–Ø –ó–ê–î–ê–ß–ê! üö®*",
            TaskPriorityEnum::BLOCKER => "‚õî *üöß –ë–õ–û–ö–ò–†–£–Æ–©–ê–Ø –ó–ê–î–ê–ß–ê*",
            TaskPriorityEnum::HIGH => "‚ö†Ô∏è *üìà –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢*",
            TaskPriorityEnum::MEDIUM => "üîµ *üìä –ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê*",
            TaskPriorityEnum::LOW => "üîπ *üìâ –ó–ê–î–ê–ß–ê –ù–ò–ó–ö–û–ì–û –ü–†–ò–û–†–ò–¢–ï–¢–ê*",
            TaskPriorityEnum::TRIVIAL => "‚ö™ *üìã –ù–ï–°–†–û–ß–ù–ê–Ø –ó–ê–î–ê–ß–ê*",
        };
    }

    private function getPriorityLine(TaskPriorityEnum $priority): string
    {
        $emoji = match($priority) {
            TaskPriorityEnum::EMERGENCY => 'üî•',
            TaskPriorityEnum::BLOCKER => '‚õî',
            TaskPriorityEnum::HIGH => '‚ö†Ô∏è',
            TaskPriorityEnum::MEDIUM => 'üîµ',
            TaskPriorityEnum::LOW => 'üîπ',
            TaskPriorityEnum::TRIVIAL => '‚ö™',
        };
        
        return "üéØ *–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏:* {$emoji} {$priority->label()}";
    }
}